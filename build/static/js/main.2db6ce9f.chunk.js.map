{"version":3,"sources":["components/Button/index.js","App.js","components/Functions.js","components/MathOperations.js","components/Numbers.js","components/Result.js","serviceWorker.js","index.js"],"names":["Button","type","text","clickHandler","className","onClick","App","useState","arrayText","setArrayText","items","words","value","length","onClickNumber","number","onContentClear","onDelete","newArray","substring","onClickOperation","operation","onClickEqual","equal","eval","toString","Functions","MathOperations","numbers","Numbers","map","key","renderButtons","Result","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uGAAA,0BAsBeA,IAlBA,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,aACzB,OAEI,4BAAQC,UAAWH,EAAMI,QAAS,WAC9BF,EAAaD,KAEZA,K,gjCCDPI,IAAM,SAANA,MAAa,IAAD,UACkBC,oDAAS,IAD3B,wMACTC,UADS,cACEC,aADF,cAEVC,MAAQC,oDAAMH,UAAW,eACzBI,MAAQF,MAAMG,OAAS,EAAIH,MAAMA,MAAMG,OAAO,GAAK,IAMzD,OACE,mEAAMT,UAAU,oBACd,2DAAC,kDAAD,CAAQQ,MAASA,QAEjB,2DAAC,mDAAD,CAASE,cAAiB,SAAAC,GAAM,OAAIN,aAAaD,UAAUO,MAI5D,2DAAC,qDAAD,CACCC,eAAgB,kBAAMP,aAAa,KAGjCQ,SAAU,WACR,GAAIT,UAAUK,OAAS,EAAE,CACvB,IAAMK,EAAWV,UAAUW,UAAU,EAAGX,UAAUK,OAAO,GACzDJ,aAAaS,OAOnB,kEAAKd,UAAU,mBAEb,2DAAC,0DAAD,CACEgB,iBAAkB,SAAAC,GAAS,OAAIZ,aAAaD,UAAYa,IACxDC,aAAc,sBAAAC,OAAK,OAAId,aAAae,KAAKhB,WAAWiB,kBAQ/CnB,2B,8BCpDf,2BAuBeoB,IAnBG,SAAC,GAAgC,IAA/BV,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,SAEhC,OAEI,6BAASb,UAAY,aACjB,kBAAC,IAAD,CAAQH,KAAO,mBAAmBC,KAAK,QAAQC,aAAgBa,IAC/D,kBAAC,IAAD,CAAQd,KAAK,SAASC,aAAgBc,O,6BCVlD,2BA6BeU,IAxBQ,SAAC,GAA4C,IAA3C1B,EAA0C,EAA1CA,KAAMmB,EAAoC,EAApCA,iBAAkBE,EAAkB,EAAlBA,aAE7C,OAEI,6BAASlB,UAAWH,GAChB,kBAAC,IAAD,CAAQC,KAAK,IAAIC,aAAciB,IAC/B,kBAAC,IAAD,CAAQlB,KAAK,IAAIC,aAAciB,IAC/B,kBAAC,IAAD,CAAQlB,KAAK,IAAIC,aAAciB,IAC/B,kBAAC,IAAD,CAAQlB,KAAK,IAAIC,aAAciB,IAC/B,kBAAC,IAAD,CAAQlB,KAAK,IAAIC,aAAcmB,O,6BCd3C,2BAKMM,EAAU,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAoCpBC,IAnBC,SAAC,GAAqB,IAApBf,EAAmB,EAAnBA,cAEd,OAEI,6BAASV,UAAY,WAnBP,SAACU,GAQnB,OAEIc,EAAQE,KARS,SAACf,GAClB,OACI,kBAAC,IAAD,CAAQgB,IAAKhB,EAAQb,KAAMa,EAAOU,WAAYtB,aAAcW,OAiB3DkB,CAAclB,M,6BC5B3B,oBAIMmB,EAAS,SAAC,GAAa,IAAZrB,EAAW,EAAXA,MAGb,OACI,yBAAKR,UAAU,UACX,8BAAOQ,KASnBqB,EAAOC,aAAe,CAClBtB,MAAO,KAGIqB,O,kMCVKE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACpC,EAAA,EAAD,OAEFqC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2db6ce9f.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Button.css'\n\nconst Button = ({type, text, clickHandler}) =>{\n    return(\n\n        <button className={type} onClick={()=>{\n            clickHandler(text)\n        }}>\n            {text}\n        </button>\n    )\n\n}\n\nButton.propTypes = {\n    type: PropTypes.string,\n    text: PropTypes.string.isRequired,\n    clickHandler:  PropTypes.func.isRequired\n}\n\nexport default Button","/* eslint no-eval: 0 */\nimport React, {useState} from 'react';\nimport words from 'lodash/words'\nimport Functions from './components/Functions'\nimport MathOperations from './components/MathOperations'\nimport Numbers from './components/Numbers'\nimport Result from './components/Result'\nimport './App.css';\n\nconst App = () => {\n  const [arrayText, setArrayText] = useState(\"\")\n  const items = words(arrayText, /[^-^+^*/]+/g)\n  const value = items.length > 0 ? items[items.length-1] : \"0\"\n\n  // ? Similar a un if\n  // (esVerdadero) ? (Resultado Verdadero) : (ResultadoPorFalso)\n  \n\n  return (\n    <main className=\"react-calculator\">\n      <Result value = {value} />\n      \n      <Numbers onClickNumber = {number => setArrayText(arrayText+number) }\n      />\n     \n     \n     <Functions \n      onContentClear={() => setArrayText(\"\")} \n\n\n        onDelete={() => {\n          if (arrayText.length > 0){\n            const newArray = arrayText.substring(0, arrayText.length-1)  \n            setArrayText(newArray)\n          }\n      }}\n      \n      />\n\n\n      <div className=\"math-operations\">\n\n        <MathOperations \n          onClickOperation={operation => setArrayText(arrayText + operation) }\n          onClickEqual={equal => setArrayText(eval(arrayText).toString()) }\n        />\n      </div>\n\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Button from './Button'\n\nconst Functions = ({onContentClear, onDelete}) => {\n\n    return(\n\n        <section className = \"functions\">\n            <Button type = \"button-long-text\" text=\"clear\" clickHandler = {onContentClear}/>\n            <Button text=\"&larr;\" clickHandler = {onDelete}/>\n\n        </section>\n\n    )\n\n}\n\nFunctions.propTypes = {\n    onContentClear: PropTypes.func.isRequired,\n    onDelete: PropTypes.func.isRequired\n}\n\nexport default Functions","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Button from './Button'\n\n\nconst MathOperations = ({type, onClickOperation, onClickEqual}) => {\n\n    return(\n\n        <section className={type}>\n            <Button text=\"+\" clickHandler={onClickOperation} />\n            <Button text=\"-\" clickHandler={onClickOperation} />\n            <Button text=\"*\" clickHandler={onClickOperation} />\n            <Button text=\"/\" clickHandler={onClickOperation} />\n            <Button text=\"=\" clickHandler={onClickEqual} />\n        </section>\n\n    )\n\n\n\n}\n\nMathOperations.propTypes = {\n    onClickOperation: PropTypes.func.isRequired,\n    onClickEqual: PropTypes.func.isRequired\n\n}\n\nexport default MathOperations","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Button from './Button'\n\n// DRY: Dont Repeat yourself\nconst numbers = [7,8,9,4,5,6,1,2,3,0]\n\nconst renderButtons = (onClickNumber) => {\n\n    const renderButton = (number) => {\n        return(\n            <Button key={number} text={number.toString()} clickHandler={onClickNumber}/>\n        )\n    }\n\n    return (\n\n        numbers.map(renderButton)\n    )\n}\n\n\nconst Numbers = ({onClickNumber}) => {\n  \n    return (\n\n        <section className = \"numbers\">     \n        \n            {renderButtons(onClickNumber)}\n\n        </section>\n\n    )\n\n\n}\n\nNumbers.propTypes ={\n    onClickNumber: PropTypes.func.isRequired\n}\n\nexport default Numbers","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst Result = ({value}) => {\n\n    \n    return (\n        <div className=\"result\">\n            <span>{value}</span>\n        </div>\n    )\n}\n\nResult.propTypes = {\n    value: PropTypes.string.isRequired\n}\n\nResult.defaultProps = {\n    value: \"0\"\n}\n\nexport default Result","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}